package com.pince.compiler.architecture

import com.squareup.kotlinpoet.*
import java.io.File

import javax.lang.model.element.ExecutableElement

import javax.lang.model.element.TypeElement

/**
 *  被注解的元素所在的类
 */
class AnnotatedClass(classElement: TypeElement) {

    var mClassElement: TypeElement
    var mFileBuilder: FileSpec.Builder
    var mTypeBuilder: TypeSpec.Builder

    init {
        mClassElement = classElement
        mFileBuilder = FileSpec.builder(classElement.asClassName().packageName(), classElement.serviceToViewModelName())

        mTypeBuilder = TypeSpec.classBuilder(classElement.serviceToViewModelName())
                .primaryConstructor(FunSpec.constructorBuilder()
                        .addParameter("application", APPLICATION_CLASS)
                        .build())
                .superclass(ParameterizedTypeName.get(BASE_VIEWMODEL_CLASS, mClassElement.asType().asTypeName()))
                .addSuperclassConstructorParameter(CodeBlock.of("application", null))
                .addModifiers(KModifier.OPEN)
                .addKdoc("This file is generated by kapt, please do not edit this file")
    }

    /**
     * 处理注解, 如果是方法注解，则添加对应信息，如果是类注解，则按照相同逻辑添加当前executableElement的信息
     */
    fun appendViewModelItem(annotation : Class< out Annotation>, executableElement: ExecutableElement) {
        mTypeBuilder.addProperty(executableElement)
                .addFun(annotation, executableElement)
    }

    fun generateViewModel(): AnnotatedClass {
        mFileBuilder.addType(mTypeBuilder.build())
        return this
    }

    fun writeTo(outputPath: String) {
        info(mFileBuilder.build().toString())
        mFileBuilder.build().writeTo(File(outputPath))
    }
}
